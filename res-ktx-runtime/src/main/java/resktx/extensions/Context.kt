@file:JvmName("ResKtx_Context")
@file:Suppress("PackageDirectoryMismatch")
package resktx

import android.content.Context
import android.graphics.drawable.Drawable
import android.os.Build
import android.util.AttributeSet
import androidx.annotation.RequiresApi

/**
 * Return a localized, styled CharSequence from the application's package's
 * default string table.
 *
 * @param resId Resource id for the CharSequence text
 */
fun Context.getText(resId: StringRes) = getText(resId.value)

/**
 * Returns a localized string from the application's package's
 * default string table.
 *
 * @param resId Resource id for the string
 * @return The string data associated with the resource, stripped of styled
 *         text information.
 */
fun Context.getString(resId: StringRes) = getString(resId.value)

/**
 * Returns a localized formatted string from the application's package's
 * default string table, substituting the format arguments as defined in
 * {@link java.util.Formatter} and {@link java.lang.String#format}.
 *
 * @param resId Resource id for the format string
 * @param formatArgs The format arguments that will be used for
 *                   substitution.
 * @return The string data associated with the resource, formatted and
 *         stripped of styled text information.
 */
fun Context.getString(resId: StringRes, vararg formatArgs: Any) = getString(resId.value, formatArgs)

/**
 * Returns a color associated with a particular resource ID and styled for
 * the current theme.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 * @return A single color value in the form 0xAARRGGBB.
 * @throws android.content.res.Resources.NotFoundException if the given ID
 *         does not exist.
 */
@RequiresApi(Build.VERSION_CODES.M)
fun Context.getColor(id: ColorRes): ColorInt = ColorInt(getColor(id.value))

/**
 * Returns a drawable object associated with a particular resource ID and
 * styled for the current theme.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 * @return An object that can be used to draw this resource.
 * @throws android.content.res.Resources.NotFoundException if the given ID
 *         does not exist.
 */
fun Context.getDrawable(id: DrawableRes): Drawable? = getDrawable(id.value)

/**
 * Returns a color state list associated with a particular resource ID and
 * styled for the current theme.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 * @return A color state list.
 * @throws android.content.res.Resources.NotFoundException if the given ID
 *         does not exist.
 */
@RequiresApi(Build.VERSION_CODES.M)
fun Context.getColorStateList(id: ColorRes) = getColorStateList(id.value)

/**
 * Set the base theme for this context.  Note that this should be called
 * before any views are instantiated in the Context (for example before
 * calling {@link android.app.Activity#setContentView} or
 * {@link android.view.LayoutInflater#inflate}).
 *
 * @param resid The style resource describing the theme.
 */
fun Context.setTheme(resid: StyleRes) = setTheme(resid.value)

/**
 * Retrieve styled attribute information in this Context's theme.  See
 * {@link android.content.res.Resources.Theme#obtainStyledAttributes(int[])}
 * for more information.
 *
 * @see android.content.res.Resources.Theme#obtainStyledAttributes(int[])
 */
fun Context.obtainStyledAttributes(attrs: Array<StyleableRes>) = obtainStyledAttributes(attrs.map { it.value }.toIntArray())

/**
 * Retrieve styled attribute information in this Context's theme.  See
 * {@link android.content.res.Resources.Theme#obtainStyledAttributes(AttributeSet, int[], int, int)}
 * for more information.
 *
 * @see android.content.res.Resources.Theme#obtainStyledAttributes(AttributeSet, int[], int, int)
 */
fun Context.obtainStyledAttributes(set: AttributeSet, attrs: Array<StyleableRes>) = obtainStyledAttributes(set, attrs.map { it.value }.toIntArray())

/**
 * Retrieve styled attribute information in this Context's theme.  See
 * {@link android.content.res.Resources.Theme#obtainStyledAttributes(AttributeSet, int[], int, int)}
 * for more information.
 *
 * @see android.content.res.Resources.Theme#obtainStyledAttributes(AttributeSet, int[], int, int)
 */
fun Context.obtainStyledAttributes(
    set: AttributeSet,
    attrs: Array<StyleableRes>,
    defStyleAttr: AttrRes,
    defStyleRes: StyleRes
) = obtainStyledAttributes(set, attrs.map { it.value }.toIntArray(), defStyleAttr.value, defStyleRes.value)
