package resktx.extensions.android.content.res

import android.content.res.Resources
import android.util.AttributeSet
import resktx.AttrRes
import resktx.DrawableRes
import resktx.StyleRes
import resktx.StyleableRes

/**
 * Return a TypedArray holding the attribute values in
 * <var>set</var>
 * that are listed in <var>attrs</var>.  In addition, if the given
 * AttributeSet specifies a style class (through the "style" attribute),
 * that style will be applied on top of the base attributes it defines.
 *
 * <p>Be sure to call {@link TypedArray#recycle() TypedArray.recycle()} when you are done
 * with the array.
 *
 * <p>When determining the final value of a particular attribute, there
 * are four inputs that come into play:</p>
 *
 * <ol>
 *     <li> Any attribute values in the given AttributeSet.
 *     <li> The style resource specified in the AttributeSet (named
 *     "style").
 *     <li> The default style specified by <var>defStyleAttr</var> and
 *     <var>defStyleRes</var>
 *     <li> The base values in this theme.
 * </ol>
 *
 * <p>Each of these inputs is considered in-order, with the first listed
 * taking precedence over the following ones.  In other words, if in the
 * AttributeSet you have supplied <code>&lt;Button
 * textColor="#ff000000"&gt;</code>, then the button's text will
 * <em>always</em> be black, regardless of what is specified in any of
 * the styles.
 *
 * @param set The base set of attribute values.  May be null.
 * @param attrs The desired attributes to be retrieved. These attribute IDs must be sorted
 *              in ascending order.
 * @param defStyleAttr An attribute in the current theme that contains a
 *                     reference to a style resource that supplies
 *                     defaults values for the TypedArray.  Can be
 *                     0 to not look for defaults.
 * @param defStyleRes A resource identifier of a style resource that
 *                    supplies default values for the TypedArray,
 *                    used only if defStyleAttr is 0 or can not be found
 *                    in the theme.  Can be 0 to not look for defaults.
 *
 * @return Returns a TypedArray holding an array of the attribute values.
 * Be sure to call {@link TypedArray#recycle() TypedArray.recycle()}
 * when done with it.
 *
 * @see Resources#obtainAttributes
 * @see #obtainStyledAttributes(int[])
 * @see #obtainStyledAttributes(int, int[])
 */
fun Resources.Theme.obtainStyledAttributes(
    attrs: Array<StyleableRes>,
    set: AttributeSet? = null,
    defStyleAttr: AttrRes = AttrRes(0),
    defStyleRes: StyleRes = StyleRes(0)
) = obtainStyledAttributes(
    set,
    attrs.map { it.value }.toIntArray(),
    defStyleAttr.value,
    defStyleRes.value
)

/**
 * Return a drawable object associated with a particular resource ID
 * and styled for the Theme.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 * @return Drawable An object that can be used to draw this resource.
 * @throws NotFoundException Throws NotFoundException if the given ID
 *         does not exist.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.Theme.getDrawable(id: DrawableRes) = getDrawable(id.value)

/**
 * Returns the resource ID for the style specified using {@code style="..."} in the
 * {@link AttributeSet}'s backing XML element or {@link Resources#ID_NULL} otherwise if not
 * specified or otherwise not applicable.
 * <p>
 * Each {@link android.view.View} can have an explicit style specified in the layout file.
 * This style is used first during the {@link android.view.View} attribute resolution, then
 * if an attribute is not defined there the resource system looks at default style and theme
 * as fallbacks.
 *
 * @param set The base set of attribute values.
 *
 * @return The resource ID for the style specified using {@code style="..."} in the
 *      {@link AttributeSet}'s backing XML element or {@link Resources#ID_NULL} otherwise
 *      if not specified or otherwise not applicable.
 */
@Suppress("EXTENSION_SHADOWED_BY_MEMBER")
fun Resources.Theme.getExplicitStyle(set: AttributeSet): StyleRes
        = StyleRes(value = getExplicitStyle(set))

/**
 * Returns the ordered list of resource ID that are considered when resolving attribute
 * values when making an equivalent call to
 * {@link #obtainStyledAttributes(AttributeSet, int[], int, int)} . The list will include
 * a set of explicit styles ({@code explicitStyleRes} and it will include the default styles
 * ({@code defStyleAttr} and {@code defStyleRes}).
 *
 * @param defStyleAttr An attribute in the current theme that contains a
 *                     reference to a style resource that supplies
 *                     defaults values for the TypedArray.  Can be
 *                     0 to not look for defaults.
 * @param defStyleRes A resource identifier of a style resource that
 *                    supplies default values for the TypedArray,
 *                    used only if defStyleAttr is 0 or can not be found
 *                    in the theme.  Can be 0 to not look for defaults.
 * @param explicitStyleRes A resource identifier of an explicit style resource.
 * @return ordered list of resource ID that are considered when resolving attribute values.
 */
fun Resources.Theme.getAttributeResolutionStack(defStyleAttr: AttrRes, defStyleRes: StyleRes, explicitStyleRes: StyleRes)
    = getAttributeResolutionStack(defStyleAttr.value, defStyleRes.value, explicitStyleRes.value)