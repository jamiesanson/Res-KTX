package resktx.extensions.android.content.res

import android.content.res.Resources
import android.os.Build
import android.util.AttributeSet
import android.util.TypedValue
import androidx.annotation.RequiresApi
import resktx.*

/**
 * Return the string value associated with a particular resource ID.  The
 * returned object will be a String if this is a plain string; it will be
 * some other type of CharSequence if it is styled.
 * {@more}
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return CharSequence The string data associated with the resource, plus
 *         possibly styled text information.
 */
fun Resources.getText(id: StringRes) = getText(id.value)

/**
 * Return the Typeface value associated with a particular resource ID.
 * {@more}
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return Typeface The Typeface data associated with the resource.
 */
@RequiresApi(Build.VERSION_CODES.O)
fun Resources.getFont(id: FontRes) = getFont(id.value)

/**
 * Returns the character sequence necessary for grammatically correct pluralization
 * of the given resource ID for the given quantity.
 * Note that the character sequence is selected based solely on grammatical necessity,
 * and that such rules differ between languages. Do not assume you know which string
 * will be returned for a given quantity. See
 * <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String Resources</a>
 * for more detail.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 * @param quantity The number used to get the correct string for the current language's
 *           plural rules.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return CharSequence The string data associated with the resource, plus
 *         possibly styled text information.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getQuantityText(id: PluralsRes, quantity: Int) = getQuantityText(id.value, quantity)

/**
 * Return the string value associated with a particular resource ID.  It
 * will be stripped of any styled text information.
 * {@more}
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return String The string data associated with the resource,
 *         stripped of styled text information.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getString(id: StringRes) = getString(id.value)

/**
 * Return the string value associated with a particular resource ID,
 * substituting the format arguments as defined in {@link java.util.Formatter}
 * and {@link java.lang.String#format}. It will be stripped of any styled text
 * information.
 * {@more}
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @param formatArgs The format arguments that will be used for substitution.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return String The string data associated with the resource,
 *         stripped of styled text information.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getString(id: StringRes, vararg formatArgs: Any) = getString(id.value, formatArgs)

/**
 * Returns the string necessary for grammatically correct pluralization
 * of the given resource ID for the given quantity.
 * Note that the string is selected based solely on grammatical necessity,
 * and that such rules differ between languages. Do not assume you know which string
 * will be returned for a given quantity. See
 * <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String Resources</a>
 * for more detail.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 * @param quantity The number used to get the correct string for the current language's
 *           plural rules.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return String The string data associated with the resource,
 * stripped of styled text information.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getQuantityString(id: PluralsRes, quantity: Int) =
    getQuantityString(id.value, quantity)

/**
 * Return the string value associated with a particular resource ID.  The
 * returned object will be a String if this is a plain string; it will be
 * some other type of CharSequence if it is styled.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @param def The default CharSequence to return.
 *
 * @return CharSequence The string data associated with the resource, plus
 *         possibly styled text information, or def if id is 0 or not found.
 */
fun Resources.getText(id: StringRes, def: CharSequence) = getText(id.value, def)

/**
 * Return the styled text array associated with a particular resource ID.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return The styled text array associated with the resource.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getTextArray(id: ArrayRes) = getTextArray(id.value)

/**
 * Return the string array associated with a particular resource ID.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return The string array associated with the resource.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getStringArray(id: ArrayRes) = getStringArray(id.value)

/**
 * Return the int array associated with a particular resource ID.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return The int array associated with the resource.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getIntArray(id: ArrayRes) = getIntArray(id.value)

/**
 * Return an array of heterogeneous values.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return Returns a TypedArray holding an array of the array values.
 * Be sure to call {@link TypedArray#recycle() TypedArray.recycle()}
 * when done with it.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.obtainTypedArray(id: ArrayRes) = obtainTypedArray(id.value)

/**
 * Retrieve a dimensional for a particular resource ID.  Unit
 * conversions are based on the current {@link DisplayMetrics} associated
 * with the resources.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @return Resource dimension value multiplied by the appropriate metric to convert to pixels.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @see #getDimensionPixelOffset
 * @see #getDimensionPixelSize
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getDimension(id: DimenRes) = getDimension(id.value)

/**
 * Retrieve a dimensional for a particular resource ID for use
 * as an offset in raw pixels.  This is the same as
 * {@link #getDimension}, except the returned value is converted to
 * integer pixels for you.  An offset conversion involves simply
 * truncating the base value to an integer.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @return Resource dimension value multiplied by the appropriate
 * metric and truncated to integer pixels.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @see #getDimension
 * @see #getDimensionPixelSize
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getDimensionPixelOffset(id: DimenRes) = getDimensionPixelOffset(id.value)

/**
 * Retrieve a dimensional for a particular resource ID for use
 * as a size in raw pixels.  This is the same as
 * {@link #getDimension}, except the returned value is converted to
 * integer pixels for use as a size.  A size conversion involves
 * rounding the base value, and ensuring that a non-zero base value
 * is at least one pixel in size.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @return Resource dimension value multiplied by the appropriate
 * metric and truncated to integer pixels.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @see #getDimension
 * @see #getDimensionPixelOffset
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getDimensionPixelSize(id: DimenRes) = getDimensionPixelSize(id.value)

/**
 * Retrieve a fractional unit for a particular resource ID.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 * @param base The base value of this fraction.  In other words, a
 *             standard fraction is multiplied by this value.
 * @param pbase The parent base value of this fraction.  In other
 *             words, a parent fraction (nn%p) is multiplied by this
 *             value.
 *
 * @return Attribute fractional value multiplied by the appropriate
 * base value.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getFraction(id: FractionRes, base: Int, pbase: Int) =
    getFraction(id.value, base, pbase)

/**
 * Return a drawable object associated with a particular resource ID and
 * styled for the specified theme. Various types of objects will be
 * returned depending on the underlying resource -- for example, a solid
 * color, PNG image, scalable image, etc.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 * @param theme The theme used to style the drawable attributes, may be {@code null}.
 * @return Drawable An object that can be used to draw this resource.
 * @throws NotFoundException Throws NotFoundException if the given ID does
 *         not exist.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getDrawable(id: DrawableRes, theme: Resources.Theme? = null) =
    getDrawable(id.value, theme)

/**
 * Return a drawable object associated with a particular resource ID for the
 * given screen density in DPI and styled for the specified theme.
 *
 * @param id The desired resource identifier, as generated by the aapt tool.
 *            This integer encodes the package, type, and resource entry.
 *            The value 0 is an invalid identifier.
 * @param density The desired screen density indicated by the resource as
 *            found in {@link DisplayMetrics}. A value of 0 means to use the
 *            density returned from {@link #getConfiguration()}.
 *            This is equivalent to calling {@link #getDrawable(int, Theme)}.
 * @param theme The theme used to style the drawable attributes, may be {@code null} if the
 *              drawable cannot be decoded.
 * @return Drawable An object that can be used to draw this resource.
 * @throws NotFoundException Throws NotFoundException if the given ID does
 *             not exist.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getDrawableForDensity(id: DrawableRes, density: Int, theme: Resources.Theme? = null) =
    getDrawableForDensity(id.value, density, theme)

/**
 * Returns a themed color integer associated with a particular resource ID.
 * If the resource holds a complex {@link ColorStateList}, then the default
 * color from the set is returned.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 * @param theme The theme used to style the color attributes, may be
 *              {@code null}.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does
 *         not exist.
 *
 * @return A single color value in the form 0xAARRGGBB.
 */
@RequiresApi(Build.VERSION_CODES.M)
@Throws(Resources.NotFoundException::class)
fun Resources.getColor(id: ColorRes, theme: Resources.Theme? = null): ColorInt =
    ColorInt(getColor(id.value, theme))

/**
 * Returns a themed color state list associated with a particular resource
 * ID. The resource may contain either a single raw color value or a
 * complex {@link ColorStateList} holding multiple possible colors.
 *
 * @param id The desired resource identifier of a {@link ColorStateList},
 *           as generated by the aapt tool. This integer encodes the
 *           package, type, and resource entry. The value 0 is an invalid
 *           identifier.
 * @param theme The theme used to style the color attributes, may be
 *              {@code null}.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does
 *         not exist.
 *
 * @return A themed ColorStateList object containing either a single solid
 *         color or multiple colors that can be selected based on a state.
 */
@RequiresApi(Build.VERSION_CODES.M)
@Throws(Resources.NotFoundException::class)
fun Resources.getColorStateList(id: ColorRes, theme: Resources.Theme? = null) =
    getColorStateList(id.value, theme)

/**
 * Return a boolean associated with a particular resource ID.  This can be
 * used with any integral resource value, and will return true if it is
 * non-zero.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return Returns the boolean value contained in the resource.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getBoolean(id: BoolRes) = getBoolean(id.value)

/**
 * Return an integer associated with a particular resource ID.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return Returns the integer value contained in the resource.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getInteger(id: IntegerRes) = getInteger(id.value)

/**
 * Retrieve a floating-point value for a particular resource ID.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @return Returns the floating-point value contained in the resource.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does
 *         not exist or is not a floating-point value.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getFloat(id: DimenRes) = getFloat(id.value)

/**
 * Return an XmlResourceParser through which you can read a view layout
 * description for the given resource ID.  This parser has limited
 * functionality -- in particular, you can't change its input, and only
 * the high-level events are available.
 *
 * <p>This function is really a simple wrapper for calling
 * {@link #getXml} with a layout resource.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return A new parser object through which you can read
 *         the XML data.
 *
 * @see #getXml
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getLayout(id: LayoutRes) = getLayout(id.value)

/**
 * Return an XmlResourceParser through which you can read an animation
 * description for the given resource ID.  This parser has limited
 * functionality -- in particular, you can't change its input, and only
 * the high-level events are available.
 *
 * <p>This function is really a simple wrapper for calling
 * {@link #getXml} with an animation resource.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return A new parser object through which you can read
 *         the XML data.
 *
 * @see #getXml
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getAnimation(id: AnimatorRes) = getAnimation(id.value)

@Throws(Resources.NotFoundException::class)
fun Resources.getAnimation(id: AnimRes) = getAnimation(id.value)

/**
 * Return an XmlResourceParser through which you can read a generic XML
 * resource for the given resource ID.
 *
 * <p>The XmlPullParser implementation returned here has some limited
 * functionality.  In particular, you can't change its input, and only
 * high-level parsing events are available (since the document was
 * pre-parsed for you at build time, which involved merging text and
 * stripping comments).
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @return A new parser object through which you can read
 *         the XML data.
 *
 * @see android.util.AttributeSet
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getXml(id: XmlRes) = getXml(id.value)

/**
 * Open a data stream for reading a raw resource.  This can only be used
 * with resources whose value is the name of an asset files -- that is, it can be
 * used to open drawable, sound, and raw resources; it will fail on string
 * and color resources.
 *
 * @param id The resource identifier to open, as generated by the aapt tool.
 *
 * @return InputStream Access to the resource data.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.openRawResource(id: RawRes) = openRawResource(id.value)

/**
 * Open a data stream for reading a raw resource.  This can only be used
 * with resources whose value is the name of an asset file -- that is, it can be
 * used to open drawable, sound, and raw resources; it will fail on string
 * and color resources.
 *
 * @param id The resource identifier to open, as generated by the aapt tool.
 * @param value The TypedValue object to hold the resource information.
 *
 * @return InputStream Access to the resource data.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 */
@Throws(Resources.NotFoundException::class)
fun Resources.openRawResource(id: RawRes, value: TypedValue) = openRawResource(id.value, value)

/**
 * Open a file descriptor for reading a raw resource.  This can only be used
 * with resources whose value is the name of an asset files -- that is, it can be
 * used to open drawable, sound, and raw resources; it will fail on string
 * and color resources.
 *
 * <p>This function only works for resources that are stored in the package
 * as uncompressed data, which typically includes things like mp3 files
 * and png images.
 *
 * @param id The resource identifier to open, as generated by the aapt tool.
 *
 * @return AssetFileDescriptor A new file descriptor you can use to read
 * the resource.  This includes the file descriptor itself, as well as the
 * offset and length of data where the resource appears in the file.  A
 * null is returned if the file exists but is compressed.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 */
@Throws(Resources.NotFoundException::class)
fun Resources.openRawResourceFd(id: RawRes) = openRawResourceFd(id.value)

/**
 * Return the raw data associated with a particular resource ID.
 *
 * @param id The desired resource identifier, as generated by the aapt
 *           tool. This integer encodes the package, type, and resource
 *           entry. The value 0 is an invalid identifier.
 * @param outValue Object in which to place the resource data.
 * @param resolveRefs If true, a resource that is a reference to another
 *                    resource will be followed so that you receive the
 *                    actual final resource data.  If false, the TypedValue
 *                    will be filled in with the reference itself.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getValue(id: AnyRes, outValue: TypedValue, resolveRefs: Boolean) =
    getValue(id.value, outValue, resolveRefs)

/**
 * Get the raw value associated with a resource with associated density.
 *
 * @param id resource identifier
 * @param density density in DPI
 * @param resolveRefs If true, a resource that is a reference to another
 *            resource will be followed so that you receive the actual final
 *            resource data. If false, the TypedValue will be filled in with
 *            the reference itself.
 * @throws NotFoundException Throws NotFoundException if the given ID does
 *             not exist.
 * @see #getValue(String, TypedValue, boolean)
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getValueForDensity(
    id: AnyRes,
    density: Int,
    outValue: TypedValue,
    resolveRefs: Boolean
) =
    getValueForDensity(id.value, density, outValue, resolveRefs)

/**
 * Retrieve a set of basic attribute values from an AttributeSet, not
 * performing styling of them using a theme and/or style resources.
 *
 * @param set The current attribute values to retrieve.
 * @param attrs The specific attributes to be retrieved. These attribute IDs must be sorted in
 *              ascending order.
 * @return Returns a TypedArray holding an array of the attribute values.
 * Be sure to call {@link TypedArray#recycle() TypedArray.recycle()}
 * when done with it.
 *
 * @see Theme#obtainStyledAttributes(AttributeSet, int[], int, int)
 */
fun Resources.obtainAttributes(set: AttributeSet, attrs: Array<StyleableRes>) =
    obtainAttributes(set, attrs.map { it.value }.toIntArray())

/**
 * Return the full name for a given resource identifier.  This name is
 * a single string of the form "package:type/entry".
 *
 * @param resid The resource identifier whose name is to be retrieved.
 *
 * @return A string holding the name of the resource.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @see #getResourcePackageName
 * @see #getResourceTypeName
 * @see #getResourceEntryName
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getResourceName(resid: AnyRes) = getResourceName(resid.value)

/**
 * Return the package name for a given resource identifier.
 *
 * @param resid The resource identifier whose package name is to be
 * retrieved.
 *
 * @return A string holding the package name of the resource.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @see #getResourceName
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getResourcePackageName(resid: AnyRes) = getResourcePackageName(resid.value)

/**
 * Return the type name for a given resource identifier.
 *
 * @param resid The resource identifier whose type name is to be
 * retrieved.
 *
 * @return A string holding the type name of the resource.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @see #getResourceName
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getResourceTypeName(resid: AnyRes) = getResourceTypeName(resid.value)

/**
 * Return the entry name for a given resource identifier.
 *
 * @param resid The resource identifier whose entry name is to be
 * retrieved.
 *
 * @return A string holding the entry name of the resource.
 *
 * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
 *
 * @see #getResourceName
 */
@Throws(Resources.NotFoundException::class)
fun Resources.getResourceEntryName(resid: AnyRes) = getResourceEntryName(resid.value)

